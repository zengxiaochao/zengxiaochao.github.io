input{
    jdbc {
        jdbc_driver_library => "/usr/share/mysql-connector-java.jar"
         jdbc_driver_class => "com.mysql.jdbc.Driver"
         jdbc_connection_string => "jdbc:mysql://rm-uf6731vc9ifc8m0yqo.mysql.rds.aliyuncs.com:3306/advcas"
         jdbc_user => "root"
         jdbc_password => "password"
         jdbc_paging_enabled => "true"
         jdbc_page_size => "25000"
         jdbc_default_timezone =>"Asia/Shanghai"
         schedule => "* * * * *"
         statement => "select id,sourceId,cpaId,productId,cid,scName,otherParamValue,mac,idfa,clientIp,fromIp,callback,insertTime from cas_user_click_v2 where id > :sql_last_value LIMIT 50000"
         columns_charset => { "scName" => "UTF-8" }
         jdbc_fetch_size => "350000"
         record_last_run => "true"
         use_column_value => "true"
         tracking_column => "id"
         last_run_metadata_path => "/tmp/last_id"
         clean_run => "false"
         lowercase_column_names => "false"
    }
}

filter {
    mutate {
        rename => ["cpaId", "orderId"]
        rename => ["idfa", "uuid"]
        rename => ["clientIp", "client_ip"]
        rename => ["fromIp", "from_ip"]
        rename => ["callback", "callChannelUrl"]
        rename => ["insertTime", "channelTime"]
        replace => { "type" => "clickNumber" }
        #  add_field => { "type" => "clickNumber" }
    }
}

output{
    if [type] == "clickNumber" {

        file { path => "/tmp/out.log" }

        elasticsearch {
            hosts => ["10.81.128.213:9200","10.81.128.114:9200","10.81.128.163:9200"]
            index => "jc-history-channelclick-%{+YYYY.MM.dd}"
            manage_template => false
            template_name => "joy_dm2"
            document_id => "%{id}"
        }

        webhdfs {
            host => "192.168.1.83"
            port => 50070
            path => "/online_backup/%{+YYYY-MM-dd}/jc-history-channelclick-%{+YYYY-MM-dd}.log"
            user => "hadoop"
            compression => "snappy"
            snappy_format => "stream"
        }

    }
    stdout {
        codec => json_lines
    }
}